---

# system packages

- name: installing system packages
  apt:
    name: "{{ item }}"
    state: present
  with_items: "{{ system_packages }}"
  when: system_packages is defined
  become: yes

# app user

- name: creating the {{ app_user }} user
  user:
    name: "{{ app_user }}"
    shell: /bin/bash
    createhome: yes
    group: "{{ app_group }}"
  become: yes

# app dirs

- name: creating {{ apps_dir }} directory
  file:
    path: "{{ apps_dir }}"
    state: directory
    mode: 0755
    owner: "{{ app_user }}"
    group: "{{ app_group }}"

- name: creating app source directory
  file:
    path: "{{ source_dir }}"
    state: directory
    mode: 0755
    owner: "{{ app_user }}"
    group: www-data
  become: yes

# clone project

- name: installing git
  apt:
    name: git
    state: present
  when: gh_repo is defined
  become: yes

- name: cloning project into {{ source_dir }}
  git:
    repo: "git@github.com:{{ gh_repo }}"
    dest: "{{ source_dir }}"
    accept_hostkey: yes
    update: yes
  when: gh_repo is defined

# setup virtualenv

- name: creating virtualenv directory
  file:
    path: "{{ virtualenv_dir }}"
    state: directory
    mode: 0755
    owner: "{{ app_user }}"
    group: www-data

- name: creating virtualenv
  command: virtualenv -p python{{ python_version }} {{ virtualenv_dir }} creates="{{ virtualenv_dir }}/bin/activate"

# pip install stuff

- name: pip installing python packages
  pip:
    name: "{{ item }}"
    state: present
    virtualenv: "{{ virtualenv_dir }}"
    chdir: "{{ source_dir }}"
  with_items: "{{ python_packages }}"
  when: python_packages is defined

- name: pip installing requirements
  pip:
    requirements: "{{ requirements_file }}"
    virtualenv: "{{ virtualenv_dir }}"
    chdir: "{{ source_dir }}"
  when: requirements_file is defined

# vassal ini

- name: creating vassal ini file
  template:
    src: vassal.ini.j2
    dest: /etc/uwsgi-emperor/vassals/{{ app_name }}.ini
    owner: "{{ app_user }}"
    group: www-data
  when: app_enabled
  become: yes
  notify: restart uwsgi

- name: creating {{ app_name }} socket for nginx/uwsgi
  file:
    path: "/tmp/{{ app_name }}.sock"
    state: touch
    owner: "{{ app_user }}"
    group: www-data
  become: yes

- name: making sure uwsgi is running
  service:
    name: uwsgi-emperor
    state: restarted
  become: yes
